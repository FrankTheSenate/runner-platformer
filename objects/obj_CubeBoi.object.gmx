<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_CubeBoi</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
//Physics
acceleration = 0.4
deceleration = 2
grav = 0.5
jspd = 15
maxhvelocity = 15
maxvvelocity = 20
hspd = 0
vspd = 0
h_collision = 0
v_collision = 0
h_direction = 0
jumps = 2

//Abilities
global.grapple = 0
grapple_speed = 15
xcomponent = 0
ycomponent = 0
move_lock = false
grounded = false
dashing = false
time = 0
alarm[4] = 0
alarm[3] = 0
alarm[2] = 0
shotgun_pellet_amount = 5
canshoot = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canshoot = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hspd &lt;= -30 and hspd &lt; 0
{
    hspd += 30
}
grav = 0.5
dashing = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hspd &gt;= 30 and hspd &gt; 0
{
    hspd -= 30
}
grav = 0.5
dashing = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed = 60
time = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
//Define Controls
upkey = keyboard_check(ord('W'))
upkeytapped = keyboard_check_pressed(ord('W'))
lkey = keyboard_check(ord('A'))
lkeytapped = keyboard_check_pressed(ord('A'))
rkey = keyboard_check(ord('D'))
rkeytapped = keyboard_check_pressed(ord('D'))
jkey = keyboard_check_pressed(vk_space)
jkey_held = keyboard_check(vk_space)
dkey = keyboard_check(ord('S'))


//Movement Left
if lkey
{
    if sign(hspd) &lt;= 0
    {
        hspd -= acceleration
    }
    else
    {
        hspd -= deceleration
    }
}
    
//Movement Right
if rkey
{
    if sign(hspd) &gt;= 0
    {
        hspd += acceleration
    }
    else
    {
        hspd += deceleration
    }
}

if move_lock = false
{
    move = lkey + rkey
}

//Check floor
if place_meeting(x,y+1, obj_Ground)
{
    grounded = true
}
else
{
    grounded = false
}

//WallJumping
/* This is an attempt to get holding space bar before pressing directional buttons to work, but sadly as is it does nothing
if (jkey) and place_meeting(x + 10, y, obj_Ground) and grounded = false
{
    if rkey and !lkey
    {
        jumps = 1
        vspd = 0
    }
    else if lkey and !rkey
    {
        jumps = 1
        vspd = 0
    }
}

if (jkey) and place_meeting(x - 10, y, obj_Ground) and grounded = false
{
    if rkey and !lkey
    {
        jumps = 1
        vspd = 0
    }
    else if lkey and !rkey
    {
        jumps = 1
        vspd = 0
    }
}
*/
//Left WallJump
if (lkey) and place_meeting(x + 10, y, obj_Ground) and grounded = false
{
    if jkey and !rkey
    {
        jumps = 1
        vspd = 0
    }
}
else if jkey and place_meeting(x + 10, y, obj_Ground) and grounded = false
    if lkey and !rkey
    {
        jumps = 1
        vspd = 0
    }
//Right Walljump
if (rkey) and place_meeting(x - 10, y, obj_Ground) and grounded = false
{
    if jkey and !lkey
    {
        jumps = 2
        vspd = 0
    }
}
else if jkey and place_meeting(x - 10, y, obj_Ground) and grounded = false
{
    if rkey and !lkey
    {
        jumps = 2
        vspd = 0
    }
}
//No Movement (slowing down)
if (!lkey and !rkey) or (lkey and rkey)
{
    hspd -= min(abs(hspd), deceleration) * sign(hspd)
}
        


//Jumping
if place_meeting(x,y+1, obj_Ground)
{
    jumps = 2
}
if dashing = false
{
    if jkey and jumps &gt; 0
    {
        vspd = 0
        vspd -= jspd
        jumps -=1
    }
}

//No jumps after falling off platform
if grounded = false and jumps &gt; 1
{
    jumps = 1              
}

if vspd &lt; 0 and !jkey_held vspd += grav

//Gravity
if dashing = true
{
grav = 0
vspd = 0
}
else
{
grav = 0.5
}
vspd += grav

//Vertical Collisions
if place_meeting(x,y+vspd,obj_Ground) 
{
        while !place_meeting(x,y+sign(vspd),obj_Ground) 
        {
                 y += sign(vspd)
        }
        vspd = 0
}





hspd += xcomponent
vspd += ycomponent

//Horizontal collisions
if place_meeting(x+hspd,y,obj_Ground) 
{
        while !place_meeting(x+sign(hspd),y,obj_Ground) 
        {
                 x += sign(hspd)
        }
        hspd = 0
}

//Diagonal Collisions
if place_meeting(x+hspd,y+vspd,obj_Ground) 
{
    while !place_meeting(x+sign(hspd),y+sign(vspd),obj_Ground) 
        {
                 y += sign(vspd)
                 x += sign(hspd)
        }
        vspd = 0
        hspd = 0
}

//Horizontal Speed limit

if alarm[2] = -1 and alarm [3] = -1
{
    if hspd &gt; maxhvelocity and hspd &gt; 0
        {
            acceleration = 0
            hspd -= 1
        }
    else if hspd &lt; -maxhvelocity and hspd &lt; 0
        {
            acceleration = 0
            hspd += 1
        }
    else
        {
            acceleration = 0.4
        }
}

//Vertical Speed Limit (Doesn't currently work, but it will later)
if abs(vspd) &gt; maxvvelocity
{
        if vspd &lt; -maxvvelocity and vspd &lt; 0
        {
            vspd += 1
        }
}

x += hspd
y += vspd


//Reset components
xcomponent = 0
ycomponent = 0


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat
//Melee
if mouse_check_button_pressed(mb_left)
{
instance_create(obj_CubeBoi.x, obj_CubeBoi.y, obj_Attack)
}
//ShotGun
if mouse_check_button_pressed(mb_right) and canshoot = true
{
    obj_CubeBoi.xcomponent = 0
    obj_CubeBoi.hspd = 0
    if vspd &gt; 0
    {
        vspd = 0
    }
    var i
    for (i = 0; i &lt;= shotgun_pellet_amount; i += 1)
    {
        instance_create(obj_CubeBoi.x, obj_CubeBoi.y, obj_bullet)
    }
    canshoot = false
    alarm[5] = 45
}

//Grapple (Should probably be under movement but movement is really cluttered and I'm afraid if I touch it it'll explode into pieces)
if keyboard_check_pressed(ord("E"))
{
instance_create(obj_CubeBoi.x, obj_CubeBoi.y, obj_grapplehead)
}

if instance_exists(obj_grapplehead)
{
    if global.grapple = 1
        {
            grav = 0
            motion_set(point_direction(x, y, obj_grapplehead.x, obj_grapplehead.y), grapple_speed)
            xcomponent += lengthdir_x(grapple_speed, point_direction(x, y, obj_grapplehead.x, obj_grapplehead.y))
            ycomponent += lengthdir_y(grapple_speed, point_direction(x, y, obj_grapplehead.x, obj_grapplehead.y))
            hspd = 0
            vspd = 0

        }
    }
//Turn off grapple
if global.grapple = 0 and !instance_exists(obj_bullet)
{
    motion_set(point_direction(x, y, x, y), 0)
    grav = 0.5
    xcomponent = 0
    ycomponent = 0
}
//Check if player is grappling and hitting wall
else if place_meeting(x+xcomponent, y+ycomponent, obj_Ground)
{
    motion_set(point_direction(x, y, x, y), 0)
    grav = 0.5
    global.grapple = 0
    with( obj_grapplehead ) 
{
    instance_destroy()
}
}

//Slow Down Time Toggle
if keyboard_check_pressed(ord("Q"))
{
    if time = 1
    {
        room_speed = 60
        time = 0
        alarm[1] = 0
    }
    
    else if time = 0
    {
        room_speed = 20
        time = 1
        alarm[1] = 20
    }
}

//Dashing

//Dashing Right
if alarm[4] = 0
{
    if rkeytapped
    {
        if rkeytapped and alarm[2] &gt; 0
        {
            hspd = 30
            alarm[4] = 30
            grav = 0
            dashing = true
        }
        alarm[2] = 10

    }
}
//Dashing Left
if alarm[4] = 0
{
    if lkeytapped
    {
        if lkeytapped and alarm[3] &gt; 0
        {
            hspd = -30
            alarm[4] = 30
            grav = 0
            dashing = true
        }
        alarm[3] = 10

    }
}

if alarm [4] &gt;0
{
    alarm [4] -= 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
