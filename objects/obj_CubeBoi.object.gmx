<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_CubeBoi</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
//Physics
acceleration = 1
deceleration = 4
grav = 1
jspd = 20
maxvelocity = 16
hspd = 0
vspd = 0
h_collision = 0
v_collision = 0
h_direction = 0
jumps = 1

//Abilities
global.grapple = 0
grapple_speed = 25
xcomponent = 0
ycomponent = 0
move_lock = false
grounded = false
time = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed = 30
time = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Used for wall jumping
move_lock = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
//Define Controls
lkey = keyboard_check(ord('A'))
rkey = keyboard_check(ord('D'))
jkey = keyboard_check_pressed(vk_space)
jkey_held = keyboard_check(vk_space)
dkey = keyboard_check(ord('S'))

//Movement Left
if lkey
{
    if sign(hspd) &lt;= 0
    {
        hspd -= acceleration
    }
    else
    {
        hspd -= deceleration
    }
}
    
//Movement Right
if rkey
{
    if sign(hspd) &gt;= 0
    {
        hspd += acceleration
    }
    else
    {
        hspd += deceleration
    }
}

if move_lock = false
{
    move = lkey + rkey
}

//Check floor
if place_meeting(x,y+1, obj_Ground)
{
    grounded = true
}
else
{
    grounded = false
}

//WallJumping
if (lkey) and place_meeting(x + 10, y, obj_Ground) and grounded = false
{
    if jkey and !rkey
    {
        vspd = -jspd
        move = -1
        move_lock = true
        alarm[0] = 10 
    }
}
if (rkey) and place_meeting(x - 10, y, obj_Ground) and grounded = false
{
    if jkey and !lkey
    {
        vspd = - jspd;
        move = 1
        move_lock = true
        alarm[0] = 10
    }
}

//No Movement (slowing down)
if (!lkey and !rkey) or (lkey and rkey)
{
    hspd -= min(abs(hspd), deceleration) * sign(hspd)
}
        
//Horizontal collisions
if place_meeting(x+hspd,y,obj_Ground) 
{
        while !place_meeting(x+sign(hspd),y,obj_Ground) 
        {
                 x += sign(hspd)
        }
        hspd = 0
}

//Jumping
if place_meeting(x,y+1, obj_Ground)
{
    jumps = 1
}

if jkey and jumps &gt; 0
{
  vspd -= jspd
  jumps -=1
}

if vspd &lt; 0 and !jkey_held vspd = max(vspd, -jspd/2)

//Groundslam
if dkey
{
    grav =  8
    if place_meeting(x,y,obj_Enemy)
    {
        with(instance_nearest(x,y, obj_Enemy))
        {
            instance_destroy()
        }
    }
}

//Gravity
vspd += grav

//Vertical Collisions
if place_meeting(x,y+vspd,obj_Ground) 
{
        while !place_meeting(x,y+sign(vspd),obj_Ground) 
        {
                 y += sign(vspd)
        }
        vspd = 0
}



hspd += xcomponent
vspd += ycomponent

x += hspd
y += vspd



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat
//Melee
if mouse_check_button_pressed(mb_left)
{
instance_create(obj_CubeBoi.x, obj_CubeBoi.y, obj_Attack)
}
//Gun
if mouse_check_button_pressed(mb_right)
{
instance_create(obj_CubeBoi.x, obj_CubeBoi.y, obj_bullet)
}

//Grapple (Should probably be under movement but movement is really cluttered and I'm afraid if I touch it it'll explode into pieces)
if keyboard_check_pressed(ord("E"))
{
instance_create(obj_CubeBoi.x, obj_CubeBoi.y, obj_grapplehead)
}

if instance_exists(obj_grapplehead)
{
    if global.grapple = 1
        {
            grav = 0
            motion_set(point_direction(x, y, obj_grapplehead.x, obj_grapplehead.y), grapple_speed)
            xcomponent = lengthdir_x(grapple_speed, point_direction(x, y, obj_grapplehead.x, obj_grapplehead.y))
            ycomponent = lengthdir_y(grapple_speed, point_direction(x, y, obj_grapplehead.x, obj_grapplehead.y))
            hspd = 0
            vspd = 0

        }
    }
    
if global.grapple = 0
{
    motion_set(point_direction(x, y, x, y), 0)
    grav = 1
    xcomponent = 0
    ycomponent = 0
}

//Slow Down Time Toggle
if keyboard_check_pressed(ord("Q"))
{
    if time = 1
    {
        room_speed = 30
        time = 0
        alarm[1] = 0
    }
    
    else if time = 0
    {
        room_speed = 10
        time = 1
        alarm[1] = 20
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
